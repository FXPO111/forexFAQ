from telegram import Update, ReplyKeyboardMarkup, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode
from core import get_best_answer, normalize_text
from quiz import get_quiz_question
import asyncio
import time
import os
import random
import json  # –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON

BOT_TOKEN = '7636335819:AAHeSZJPnJDX20tv_OgVSXeltKnos7oIaGM'
IMAGE_DIR = "images"

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
with open("train_questions.json", "r", encoding="utf-8") as f:
    questions_db = json.load(f)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_only_keyboard = ReplyKeyboardMarkup([['‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç']], resize_keyboard=True)
start_keyboard = ReplyKeyboardMarkup([['–ü—Ä–æ—Å—Ç–æ–π', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π']], resize_keyboard=True)
mode_keyboard = ReplyKeyboardMarkup([['–ü—Ä–æ—Å—Ç–æ–π', '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π']], resize_keyboard=True)

terms_keyboard_simple = ReplyKeyboardMarkup(
    [['–º–∞—Ä–∂–∞', '–ø–ª–µ—á–æ'], ['–∏–º–±–∞–ª–∞–Ω—Å', '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'], ['–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Å–≤–æ–ø'], ['–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', '/help']],
    resize_keyboard=True
)

terms_keyboard_detailed = ReplyKeyboardMarkup(
    [['–º–∞—Ä–∂–∞', '–ø–ª–µ—á–æ'], ['–∏–º–±–∞–ª–∞–Ω—Å', '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'], ['–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '—Å–≤–æ–ø'], ['quiz', 'train'], ['–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', '/help']],
    resize_keyboard=True
)

user_last_message_time = {}

def find_image_file(query: str):
    fname = query.replace(" ", "_") + ".png"
    path = os.path.join(IMAGE_DIR, fname)
    if os.path.exists(path):
        return path
    return None

TRAIN_TOPICS = list(questions_db.keys())

train_topics_keyboard = ReplyKeyboardMarkup(
    [TRAIN_TOPICS], resize_keyboard=True, one_time_keyboard=True
)

train_control_keyboard = ReplyKeyboardMarkup(
    [["–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞", "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

def get_random_question_for_topic(topic):
    questions = questions_db.get(topic, [])
    if not questions:
        return None
    return random.choice(questions)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["started"] = False
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=start_only_keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "–í –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã.\n"
        "–í —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: quiz –∏ train.\n"
        "–í —Ä–µ–∂–∏–º–µ train –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π '–í—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞'."
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()
    if now - user_last_message_time.get(user_id, 0) < 1:
        await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    user_last_message_time[user_id] = now

    raw = update.message.text.strip()
    low = raw.lower()

    if not context.user_data.get("started"):
        if low == "‚ñ∂Ô∏è —Å—Ç–∞—Ä—Ç":
            context.user_data["started"] = True
            await update.message.reply_text("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=mode_keyboard)
        else:
            await update.message.reply_text("üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=start_only_keyboard)
        return

    if context.user_data.get("in_train_mode"):
        train_state = context.user_data.get("train_state", "choosing_topic")

        if low == "–≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞":
            context.user_data["in_train_mode"] = False
            for k in ["train_state", "train_topic", "train_questions", "train_index", "correct", "explanation", "answered"]:
                context.user_data.pop(k, None)
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=terms_keyboard_detailed)
            return

        if low == "—Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É":
            context.user_data["train_state"] = "choosing_topic"
            for k in ["train_topic", "train_questions", "train_index", "correct", "explanation", "answered"]:
                context.user_data.pop(k, None)
            await update.message.reply_text(
                "–¢–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
                reply_markup=train_topics_keyboard
            )
            return

        if train_state == "choosing_topic":
            if raw not in TRAIN_TOPICS:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=train_topics_keyboard)
                return

            questions = questions_db.get(raw, [])
            if not questions:
                await update.message.reply_text("–î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.", reply_markup=train_topics_keyboard)
                return

            random.shuffle(questions)

            context.user_data["train_topic"] = raw
            context.user_data["train_questions"] = questions
            context.user_data["train_index"] = 0
            context.user_data["train_state"] = "asking_question"

            await update.message.reply_text(
                f"–¢–µ–º–∞ '{raw}' –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏–Ω–≥.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=train_control_keyboard
            )
            await send_train_question(update, context)
            return

        if train_state == "asking_question":
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, —Ç–µ–∫—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

    if low == "—Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º":
        context.user_data.clear()
        context.user_data["started"] = True
        await update.message.reply_text("–†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=mode_keyboard)
        return
    if low == "–ø—Ä–æ—Å—Ç–æ–π":
        context.user_data["detailed"] = False
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω.", reply_markup=terms_keyboard_simple)
        return
    if low == "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π":
        context.user_data["detailed"] = True
        await update.message.reply_text("‚úÖ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω.", reply_markup=terms_keyboard_detailed)
        return
    if "detailed" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.", reply_markup=start_keyboard)
        return

    if context.user_data.get("detailed") and low in ["quiz", "train"]:
        if low == "quiz":
            await handle_quiz(update, context)
        elif low == "train":
            await handle_train(update, context)
        return

    query = normalize_text(raw)
    detailed = context.user_data["detailed"]
    answer, source = get_best_answer(query, detailed=detailed)
    response = f"üí≠ <b>–û—Ç–≤–µ—Ç:</b>\n{answer}\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

    if detailed:
        img_path = find_image_file(query)
        if img_path:
            try:
                with open(img_path, "rb") as f:
                    await update.message.reply_photo(photo=InputFile(f))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_data = get_quiz_question()
    question = question_data["definition"]
    options = question_data["options"].copy()
    correct_key = question_data["correct"]
    explanation = question_data.get("explanation", "")

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    shuffled_options = options.copy()
    random.shuffle(shuffled_options)
    correct_index = shuffled_options.index(correct_key)

    context.user_data["correct"] = correct_key
    context.user_data["explanation"] = explanation
    context.user_data["answered"] = False
    context.user_data["options"] = shuffled_options

    keyboard = [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(shuffled_options)]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"üß† –£–≥–∞–¥–∞–π —Ç–µ—Ä–º–∏–Ω:\n\n{question}", reply_markup=reply_markup)

    async def quiz_timeout():
        await asyncio.sleep(10)
        if not context.user_data.get("answered"):
            await update.message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_key}</b>\n\nüí° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞:\n{explanation}",
                parse_mode=ParseMode.HTML
            )
            context.user_data["answered"] = True

    context.user_data["quiz_task"] = asyncio.create_task(quiz_timeout())

async def handle_train(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["in_train_mode"] = True
    context.user_data["train_state"] = "choosing_topic"
    await update.message.reply_text(
        "üéØ–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=train_topics_keyboard
    )

async def send_train_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    questions = context.user_data.get("train_questions", [])
    idx = context.user_data.get("train_index", 0)

    if idx >= len(questions):
        text = "üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞."
        await update.message.reply_text(text, reply_markup=train_control_keyboard)
        context.user_data["train_state"] = "choosing_topic"
        return

    q = questions[idx]
    text = f"‚ùì –í–æ–ø—Ä–æ—Å ({idx + 1}/{len(questions)}):\n{q['definition']}"

    # –ü–µ—Ä–µ–º–µ—à–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    options = q["options"].copy()
    random.shuffle(options)
    context.user_data["train_options"] = options

    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(options)]
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ quiz
    if "correct" in context.user_data and not context.user_data.get("in_train_mode", False):
        if context.user_data.get("answered", False):
            await query.edit_message_text("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
            return

        correct = context.user_data["correct"]
        explanation = context.user_data.get("explanation", "")

        options = context.user_data.get("options", [])
        if not options:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.")
            return

        selected_idx = int(data)
        correct_idx = options.index(correct) if correct in options else -1

        if selected_idx == correct_idx:
            text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\nüí°{explanation}"
        else:
            text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>.\n\nüí°{explanation}"

        await query.edit_message_text(text, parse_mode=ParseMode.HTML)
        context.user_data["answered"] = True

        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        task = context.user_data.get("quiz_task")
        if task:
            task.cancel()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–∞
    if context.user_data.get("in_train_mode") and context.user_data.get("train_state") == "asking_question":
        idx = context.user_data.get("train_index", 0)
        questions = context.user_data.get("train_questions", [])
        if idx >= len(questions):
            await query.edit_message_text("–¢—Ä–µ–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
            return

        question = questions[idx]
        correct = question["correct"]
        explanation = question.get("explanation", "")

        options = context.user_data.get("train_options", question["options"])
        selected_idx = int(data)
        correct_idx = options.index(correct)

        if selected_idx == correct_idx:
            text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\nüí° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞:\n{explanation}"
        else:
            text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>.\n\nüí° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞:\n{explanation}"

        await query.edit_message_text(text, parse_mode=ParseMode.HTML)

        context.user_data["train_index"] = idx + 1
        await asyncio.sleep(1)

        if context.user_data["train_index"] < len(questions):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            class DummyUpdate:
                message = query.message
            dummy_update = DummyUpdate()
            await send_train_question(dummy_update, context)
        else:
            await query.message.reply_text(
                "üéâ –¢—Ä–µ–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç—Ä–µ–Ω–∏–Ω–≥–∞.",
                reply_markup=train_control_keyboard
            )
            context.user_data["train_state"] = "choosing_topic"
        return

if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    application.run_polling()